https://www.youtube.com/watch?v=PMR0ld5h938&list=PLsyeobzWxl7qBZtsEvp_n2A7sJs2MpF3r

Save method, save(), belongs to session factory and session factory interface belongs to Hibernate Framework.
Since to use save() method, we need to create object of session factory.
but since, its an interface, so first we have to create object of class, Configuration.

Configuration con = new  Configuration();
SessionFactory sf = con.buildSessionFactory();
Session session = sf.openSession();
session.save(ObjectName);
--------------------------------------------------------------------------------------------------------------
ACID property
--------------------------------------------------------------------------------------------------------------
hibernate configuration properties, like-hbm2ddl.auto, show_sql etc...
--------------------------------------------------------------------------------------------------------------
Annotations - @Entity, @Table, @Id  
Fetch object - Employee dbEmployee = (Employee) session.get(Employee.class, id);
embeddable
Mapping(Relationship)
Fetch Type - Eager and Lazy----> By default lazy.
Caching


Named Query
HCQL
Diffeent states of object - https://www.youtube.com/watch?v=ZLeTFBvegfY
get() vs load()

update() vs merge() - 
update is used to put a detached object into persistent state if no other object with the same id and type is attached to the session. Merge doesn't care about states. It just returns a persisted object of the same type if it doesn't exist in the session or it updates the old object with the values of the new object.

Update: if you are sure that the session does not contains an already persistent instance with the same identifier,then use update to save the data in hibernate

Merge: if you want to save your modifications at any time with out knowing about the state of an session, then use merge() in hibernate.


Auto dirty -
Hibernate allows dirty checking feature. It saves developer's time and effort in updating of database when states of objects are modified inside a transaction.
Hibernate automatically detects the object states whenever changed and synchronized with the database in order to update.

Proxy objects
Embedded and Embeddable - https://www.callicoder.com/hibernate-spring-boot-jpa-embeddable-demo/
Eager and Lazy loading
--------------------------------------------------------------------------------------------------------------
Hibernate Interview Questions - https://www.youtube.com/watch?v=12uFYsZrick

difference between save() and persist(); ? - 
1)First difference between save and persist is there return type. Similar to save method persist also INSERT records into database but return type of persist is void while return type of save is Serializable object.  
2)save() is used outside transaction boundaries where as persist() should be used within transaction boundaries.
Letâ€™s say if i am calling Save() within same session multiple times that may ended up duplicate rows in the database.
if i am calling Persist() within different session multiple times that may ended up with unique row in the database.
Note that use of persist() should be within transaction scope only.

Generator type - Auto, Identity, Sequence and Table (Sequence)
Auto - hibernate will pick an appropriate strategy by its own asper DB.
IDENTITY is supported by:
DB2, MYSQL, SQL SERVER  and SYBASE databases.

SEQUENCE is supported by:
If there is no sequence in database, it uses default sequence. For ex for oracle database it uses HIBERNATE_SEQUENCE.

Ex code - 
SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
Session session = sessionFactory.getCurrentSession();
	
//HQL example - Get All Employees
Transaction tx = session.beginTransaction();
Query query = session.createQuery("from Employee");
List<Employee> empList = query.list();
for(Employee emp : empList){
System.out.println("List of Employees::"+emp.getId()+","+emp.getAddress().getCity());
}

//HCQL example
SessionFactory factory = cfg.buildSessionFactory();
Session session = factory.openSession();

Criteria crit = session.createCriteria(Product.class);
Criterion cn = Restrictions.gt("price",new Double(17000));
crit.add(cn);
List l=crit.list();

Custom cache implementation in java - https://crunchify.com/how-to-create-a-simple-in-memory-cache-in-java-lightweight-cache/