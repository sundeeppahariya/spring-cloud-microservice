SpringBoot-

Focus on development not on configuration.
if want to add more dependencies, then you may do it.

Feature - provides, embedded tomcat server.

SpringBoot provides, production ready application.

If you are working with JSP then your sprig boot application doesn't know, how to convert jsp to servlet.
for this, you need to add a dependency- jesper in pom.xml.

Application Properties File - 
in this file you may define the prefix and suffix of your view pages.
spring.mvc.view.prefix=/pages/
spring.mvc.view.suffix=.jsp

if wish to work with any database (say h2)-
spring.h2.console.enabled=true
spring.datasource.platform=h2
spring.datasource.url=jdbc:h2:mem:nikhil

When need to perform CRUD operations with any model then - steps - 
1. just create an interface like below - 
   public interface TemplateRepo extends CrudRepository<{Model Name}, Integer>

2. Autowired this Repo in service and use accordingly - 
   @Autowired
   TemplateRepo tempRepo

   tempRepo.save({Model Name})

---------------------------------------------------------------------------------------------------------------
Set up a Spring Boot application with Maven - 

We can include Spring Boot in a Maven project just like we would any other library. 
However, the best way is to inherit from the spring-boot-starter-parent project and declare dependencies to Spring Boot starters. 
Doing this lets our project reuse the default settings of Spring Boot.	

How to deploy Spring Boot web applications as JAR and WAR files?
Spring tackles this problem by providing a plugin, namely spring-boot-maven-plugin, to package a web application as an executable JAR. 
To include this plugin, just add a plugin element to pom.xml:
<plugin>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-maven-plugin</artifactId>
</plugin>
With this plugin in place, we’ll get a fat JAR after executing the package phase. 
This JAR contains all the necessary dependencies, including an embedded server. Thus, we no longer need to worry about configuring an external server.

We can then run the application just like we would an ordinary executable JAR.

Notice that the packaging element in the pom.xml file must be set to jar to build a JAR file
<packaging>jar</packaging>
---------------------------------------------------------------------------------------------------------------
Interview Questions - 
https://dzone.com/articles/top-10-spring-boot-interview-questions
https://www.javatpoint.com/spring-boot-interview-questions
https://www.youtube.com/watch?v=OBFjJKT0DIw
https://www.youtube.com/watch?v=39MiCMWCeEM
https://www.onlineinterviewquestions.com/spring-boot-interview-questions/

add a spring boot actuator dependency in pom.xml.
this will download a actuator jar and performs the helth check of different server.
Ex : type this url in browser - http://localhost:8080/health

@autoconfiguration - autoconfiguration represents a way to automatically configure a Spring application based on the dependecies that are present on the classpath.
This can make development faster and easier by eliminating the need for defining certain beans that are included in the auto-configuration classes.

How to define bean scope as prototype when default scope is singleton in spring boot ?